// Code generated by MockGen. DO NOT EDIT.
// Source: module/player/repository.go

// Package mock_player is a generated GoMock package.
package mock_player

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/yezarela/go-soccer/model"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ListPlayer mocks base method
func (m *MockRepository) ListPlayer(ctx context.Context) ([]model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlayer", ctx)
	ret0, _ := ret[0].([]model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlayer indicates an expected call of ListPlayer
func (mr *MockRepositoryMockRecorder) ListPlayer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlayer", reflect.TypeOf((*MockRepository)(nil).ListPlayer), ctx)
}

// GetPlayer mocks base method
func (m *MockRepository) GetPlayer(ctx context.Context, id string) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", ctx, id)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer
func (mr *MockRepositoryMockRecorder) GetPlayer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockRepository)(nil).GetPlayer), ctx, id)
}

// CreatePlayer mocks base method
func (m *MockRepository) CreatePlayer(ctx context.Context, data model.Player) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", ctx, data)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlayer indicates an expected call of CreatePlayer
func (mr *MockRepositoryMockRecorder) CreatePlayer(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockRepository)(nil).CreatePlayer), ctx, data)
}
